import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { rename } from "fs/promises";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
});

const renameCSS = async () => {
	try {
		await rename("main.css", "styles.css");
	} catch (err) {
		// Ignore if main.css doesn't exist
		if (err.code !== 'ENOENT') {
			console.error("Error renaming CSS file:", err);
		}
	}
};

if (prod) {
	await context.rebuild();
	await renameCSS();
	process.exit(0);
} else {
	await context.watch();
	// Watch for CSS changes and rename
	const watchCSS = setInterval(async () => {
		await renameCSS();
	}, 1000);
}
